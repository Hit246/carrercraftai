rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection
    match /users/{userId} {
      // A user can create their own document, and can read/update/delete their own document.
      allow create: if request.auth.uid != null;
      allow read, update, delete: if request.auth.uid == userId;

      // Users can manage their own resume versions.
      // This rule works because the parent document read access is granted above.
      match /resumeVersions/{versionId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Teams collection
    match /teams/{teamId} {
      // Team owner can read/write their team document
      allow read, write: if request.auth.uid == resource.data.owner;

      // Team members management
      match /members/{memberId} {
        // Team owner can add/remove members
        allow read, write, delete: if get(/databases/$(database)/documents/teams/$(teamId)).data.owner == request.auth.uid;
      }
    }

    // Settings can only be managed by admins (not enforced by rules here, but by UI)
    match /settings/{docId} {
      allow read;
      allow write: if false; // Protect settings from client-side writes
    }
    
    // Anyone can submit a support request
    match /supportRequests/{requestId} {
      allow create: if request.auth.uid != null;
      // Only admins should be able to read/update/delete support requests
      allow read, update, delete: if false; // Assume admin actions are via a backend
    }
  }
}
