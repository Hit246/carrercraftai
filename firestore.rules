rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      // You can define admin UIDs here or check a role in the user's document
      let adminEmails = ['admin@careercraft.ai', 'hitarth0236@gmail.com'];
      return get(/databases/$(database)/documents/users/$(userId)).data.email in adminEmails;
    }

    // Users can only read/write their own document
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin(request.auth.uid);
      allow create: if request.auth.uid != null;
      allow list: if isAdmin(request.auth.uid);
    }

    // Users can only read/write their own resume
    match /resumes/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
    
    // Team management rules
    match /teams/{teamId} {
      // Team owner can create/delete the team document
      allow create: if request.resource.data.owner == request.auth.uid;
      allow delete: if resource.data.owner == request.auth.uid;
      
      // Team members (checked via their user doc) can read team data
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;

      // Rules for the 'members' subcollection
      match /members/{memberId} {
        // Team owner can add/remove members
        allow create, delete: if get(/databases/$(database)/documents/teams/$(teamId)).data.owner == request.auth.uid;
        // All team members can read the list of other members
        allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId;
      }
    }
    
    // Settings can only be read by any authenticated user, but only written by an admin
    match /settings/payment {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin(request.auth.uid);
    }
  }
}
