rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Helper function to check if a user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is an admin
    function isAdmin() {
      return request.auth.token.email in ['admin@careercraft.ai', 'hitarth0236@gmail.com'];
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Allow admins to read/write anything
    match /{path=**} {
      allow read, write: if isAdmin();
    }

    // Users can read/update their own document.
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if isAuthenticated();
    }
    
    // Users can manage their own resume versions.
    match /users/{userId}/resumeVersions/{versionId} {
      allow read, write: if isOwner(userId);
    }

    // Allow authenticated users to read team and member info.
    // Only team owners can create/edit team info.
    match /teams/{teamId} {
      allow read, create: if isAuthenticated();
      allow write: if get(/databases/$(database)/documents/teams/$(teamId)).data.owner == request.auth.uid;
      
      match /members/{memberId} {
          allow read: if isAuthenticated();
          allow write: if get(/databases/$(database)/documents/teams/$(teamId)).data.owner == request.auth.uid;
      }
    }
    
    // Settings are public (for payment details).
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Users can create their own support requests.
    match /supportRequests/{requestId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update: if isAdmin();
    }
  }
}
