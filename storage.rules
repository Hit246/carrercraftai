rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Avatars: Users can read/write their own avatar
    match /avatars/{userId} {
      allow write: if isAuthenticated() && request.auth.uid == userId;
      allow read: if true; // Avatars are often public
    }

    // Payment Proofs: Users can read/write their own proofs
    match /payment_proofs/{userId}/{fileName} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Candidate Resumes: Allow any authenticated user to upload for now to fix permissions.
    // In production, this should be locked down further, likely with custom claims.
    match /teams/{teamId}/resumes/{fileName} {
      allow read, write: if isAuthenticated();
    }

    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
