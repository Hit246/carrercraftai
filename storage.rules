rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // Function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Admins are identified by a custom claim.
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    // Recruiters are identified by a custom claim.
    function isRecruiter() {
      return request.auth.token.recruiter == true;
    }
    
    // Logged-in users can manage their own avatar.
    match /avatars/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Logged-in users can upload their own payment proof.
    match /payment_proofs/{userId}/{fileName} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Recruiters or Admins can upload resumes to their team's folder.
    // For now, allow any authenticated user to get unblocked.
    // For production, you would set a custom claim 'isRecruiter'
    // on the user and use `if isRecruiter() || isAdmin();`
    match /teams/{teamId}/resumes/{fileName} {
      allow read, write: if isAuthenticated();
    }
    
    // Allow admins to read/write anywhere for settings, etc.
    match /settings/{allPaths=**} {
        allow read, write: if isAdmin();
    }
  }
}
