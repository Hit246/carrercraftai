rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    function isAuthenticated() {
      return request.auth != null;
    }

    // Allow users to read/write their own avatars
    match /avatars/{userId} {
      allow write: if isAuthenticated() && request.auth.uid == userId;
      allow read: if true; // Avatars are public
    }

    // Allow users to write their own payment proofs
    match /payment_proofs/{userId}/{fileName} {
      allow write: if isAuthenticated() && request.auth.uid == userId;
      // Admins should be able to read these, checked via custom claims or functions in a real app
      allow read: if isAuthenticated() && request.auth.uid == userId;
    }

    // Allow authenticated users to write to the resumes folder for their team
    match /teams/{teamId}/resumes/{fileName} {
        // This is a simplified rule. In a production app, you'd check
        // if the user is a member/owner of the teamId.
        allow read, write: if isAuthenticated();
    }
  }
}
